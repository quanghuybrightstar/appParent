import PushNotificationIOS from '@react-native-community/push-notification-ios';
import PushNotification from 'react-native-push-notification';
import {Platform} from 'react-native';

// Must be outside of any component LifeCycle (such as `componentDidMount`).
class LocalNotification {
    configure = (onOpenNotification) => {
        this.cancelAllLocalNotification();
        PushNotification.configure({
            // (optional) Called when Token is generated (iOS and Android)
            onRegister: (token) => {
                console.log('TOKEN:', token);
            },

            // (required) Called when a remote is received or opened, or local notification is opened
            onNotification: (notification) => {
                console.log('NOTIFICATION:', notification);

                // (required) Called when a remote is received or opened, or local notification is opened
                if (Platform.OS === 'ios') {
                    notification.finish(PushNotificationIOS.FetchResult.NoData);
                }
            },

            // (optional) Called when Registered Action is pressed and invokeApp is false, if true onNotification will be called (Android)
            onAction: (notification) => {
                console.log('ACTION:', notification.action);
                console.log('NOTIFICATION:', notification);

                // process the action
            },

            // (optional) Called when the user fails to register for remote notifications. Typically occurs when APNS is having issues, or the device is a simulator. (iOS)
            onRegistrationError: (err) => {
                // console.error(err.message, err);
            },

            // IOS ONLY (optional): default: all - Permissions to register.
            permissions: {
                alert: true,
                badge: true,
                sound: true,
            },

            // Should the initial notification be popped automatically
            // default: true
            popInitialNotification: true,

            /**
             * (optional) default: true
             * - Specified if permissions (ios) and token (android and ios) will requested or not,
             * - if not, you must call PushNotificationsHandler.requestPermissions() later
             * - if you are not using remote notification or do not have Firebase installed, use this:
             *     requestPermissions: Platform.OS === 'ios'
             */
            requestPermissions: true,
        });
    };

    showNotification = (notification) => {
        PushNotification.localNotification({
            ...this.PushNotificationAndroid,
            ...this.PushNotificationIOS,
            /* iOS and Android properties */
            //id: 0, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
            title: notification.title, // (optional)
            message: notification.message || notification.body, // (required)
            userInfo: {}, // (optional) default: {} (using null throws a JSON value '<null>' error)
            playSound: true, // (optional) default: true
            soundName: "default"
            //userInteraction: false,
        });
    }

    PushNotificationAndroid = (notification) => {
        if (Platform.OS === 'android') {
            return {
                /* Android Only Properties */
                //ticker: "My Notification Ticker", // (optional)
                largeIcon: "ic_launcher", // (optional) default: "ic_launcher". Use "" for no large icon.
                //largeIconUrl: "https://www.example.tld/picture.jpg", // (optional) default: undefined
                smallIcon: "ic_launcher_round", // (optional) default: "ic_notification" with fallback for "ic_launcher". Use "" for default small icon.
                bigPictureUrl: notification.bigPictureUrl, // (optional) default: undefined
                color: "red", // (optional) default: system default
                vibrate: true, // (optional) default: true
                invokeApp: true, // (optional) This enable click on actions to bring back the application to foreground or stay in background, default: true
            }
        }
    }

    PushNotificationIOS = () => {
        if (Platform.OS === 'ios') {
            return {
                /* iOS only properties */
                alertAction: "view", // (optional) default: view
                category: "", // (optional) default: empty string
            }
        }
    }

    cancelAllLocalNotification = () => {
        if (Platform.OS === "ios") {
            PushNotificationIOS.removeAllDeliveredNotifications()
        } else {
            PushNotification.cancelAllLocalNotifications()
        }
    };

    unregister = () => {
        PushNotification.unregister();
    };

    // removeAllDeliveredNotifications = () => PushNotification.removeAllDeliveredNotifications();
}

export const localNotification = new LocalNotification();

